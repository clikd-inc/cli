# Example AI configuration for changelog generator
ai:
  # Enable or disable AI features
  enable_ai: true
  
  # Default provider to use
  default_provider: "mistral"
  
  # Default model to use
  default_model: "mistral-medium"
  
  # Verbose logging for AI operations
  verbose: false
  
  # Model configurations
  models:
    # Mistral configuration
    mistral-medium:
      provider: "mistral"
      model_id: "mistral-medium"
      max_tokens: 1024
      temperature: 0.7
      top_p: 0.9
      context_window: 8192
      stream_response: false
    
    mistral-small:
      provider: "mistral"
      model_id: "mistral-small"
      max_tokens: 1024
      temperature: 0.7
      top_p: 0.9
      context_window: 8192
      stream_response: false
    
    # OpenAI configuration
    gpt-3.5-turbo:
      provider: "openai"
      model_id: "gpt-3.5-turbo"
      max_tokens: 1024
      temperature: 0.7
      top_p: 0.9
      context_window: 4096
      stream_response: false
    
    gpt-4:
      provider: "openai"
      model_id: "gpt-4"
      max_tokens: 1024
      temperature: 0.7
      top_p: 0.9
      context_window: 8192
      stream_response: false
    
    # Azure OpenAI configuration
    azure-gpt4:
      provider: "azure-openai"
      model_id: "gpt-4"
      max_tokens: 1024
      temperature: 0.7
      top_p: 0.9
      context_window: 8192
      stream_response: false
      # endpoint is required for Azure
      # endpoint: "https://your-azure-endpoint.openai.azure.com"
    
    # Local model configuration (e.g., Ollama)
    local-llama:
      provider: "local"
      model_id: "llama2"
      max_tokens: 1024
      temperature: 0.7
      top_p: 0.9
      context_window: 4096
      stream_response: false
      # endpoint: "http://localhost:11434/api"  # Default for Ollama

# Changelog-specific AI configuration
changelog_ai:
  # Enable specific features
  enhance_commit_messages: true
  generate_summaries: true
  categorize_commits: true
  suggest_version_bump: true
  
  # Custom prompt templates
  prompts:
    # Custom prompt for commit categorization
    categorize_commit: |
      Analyze the following git commit message and categorize it into one of these categories:
      - feature: A new feature or enhancement
      - fix: A bug fix
      - docs: Documentation changes
      - style: Code style changes (formatting, missing semicolons, etc)
      - refactor: Code refactoring without changing functionality
      - test: Adding or modifying tests
      - chore: Maintenance tasks, dependency updates, etc
      - perf: Performance improvements
      - other: None of the above
      
      Respond ONLY with the category name, nothing else.
      
      Commit message: {{.Message}} 
